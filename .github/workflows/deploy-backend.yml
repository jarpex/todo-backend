name: Deploy ToDo backend on K3s

on:
  push:
    branches:
      - main

permissions:
  contents: read
  security-events: write

jobs:
  Vault-secrets:
    runs-on: self-hosted
    env:
      KUBECTL: sudo k3s kubectl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Vault
        shell: bash
        env:
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
          VAULT_ADDR: http://192.168.1.160:21626
        run: |
          if [ -z "$VAULT_TOKEN" ]; then
            echo "❌ VAULT_TOKEN is missing"
            exit 1
          fi

          DB_USER=$(vault kv get -mount="todo-backend" -field=username postgres)
          DB_PASS=$(vault kv get -mount="todo-backend" -field=password postgres)
          DB_HOST=$(vault kv get -mount="todo-backend" -field=host postgres)
          DB_PORT=$(vault kv get -mount="todo-backend" -field=port postgres)
          DB_NAME=$(vault kv get -mount="todo-backend" -field=dbname postgres)

          JWT_SECRET=$(vault kv get -mount="todo-backend" -field=JWT_SECRET_KEY app)

          export DATABASE_URL="postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}"

          ${{ env.KUBECTL }} create secret generic backend-secrets \
            --from-literal=DATABASE_URL="$DATABASE_URL" \
            --from-literal=JWT_SECRET_KEY="$JWT_SECRET" \
            --dry-run=client -o yaml > k8s/backend-secrets.yaml

      - name: Apply backend secrets
        run: |
          ${{ env.KUBECTL }} apply -f k8s/backend-secrets.yaml

  SAST:
    runs-on: self-hosted
    needs: Vault-secrets
    env:
      KUBECTL: sudo k3s kubectl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: SAST – Run Semgrep scan in-cluster
        run: |
          ${{ env.KUBECTL }} delete job semgrep-backend-scan --ignore-not-found
          ${{ env.KUBECTL }} apply -f /home/admin/k8s/semgrep-backend-job.yaml

          echo "⏳ Waiting for Semgrep job to complete..."
          while [[ $(${{ env.KUBECTL }} get job semgrep-backend-scan -o jsonpath='{.status.succeeded}') != "1" ]]; do
            if [[ $(${{ env.KUBECTL }} get job semgrep-backend-scan -o jsonpath='{.status.failed}') == "1" ]]; then
              echo "❌ Semgrep scan failed in cluster. Deployment halted."
              ${{ env.KUBECTL }} logs job/semgrep-backend-scan
              exit 1
            fi
            sleep 5
          done

          echo "✅ Semgrep scan passed."

      - name: Upload Semgrep SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: /home/admin/build/todo-backend/semgrep-results.sarif

  Kaniko-deploy:
    runs-on: self-hosted
    needs: [Vault-secrets, SAST]
    env:
      KUBECTL: sudo k3s kubectl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare Kaniko build context
        run: |
          mkdir -p /home/admin/build/todo-backend
          rsync -av --exclude='.git' . /home/admin/build/todo-backend/

      - name: Create Kaniko build job
        run: |
          ${{ env.KUBECTL }} apply -f k8s/kaniko-backend-job.yaml

      - name: Wait for Kaniko build to finish
        run: |
          while [[ $(${{ env.KUBECTL }} get job kaniko-build-backend -o jsonpath='{.status.succeeded}') != "1" ]]; do
            echo "Waiting for kaniko-backend build to finish..."
            sleep 5
          done

      - name: Clean up Kaniko job
        run: |
          ${{ env.KUBECTL }} delete job kaniko-build-backend --ignore-not-found

      - name: Deploy backend
        run: |
          ${{ env.KUBECTL }} apply -f k8s/backend-deployment.yaml
          ${{ env.KUBECTL }} apply -f k8s/backend-service.yaml
          ${{ env.KUBECTL }} rollout restart deployment todo-backend

  DAST:
    runs-on: self-hosted
    needs: [Vault-secrets, SAST, Kaniko-deploy]
    env:
      KUBECTL: sudo k3s kubectl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run ZAP DAST scan in cluster
        run: |
          ${{ env.KUBECTL }} delete job zap-dast-scan --ignore-not-found
          ${{ env.KUBECTL }} apply -f /home/admin/k8s/zap-dast-job.yaml

          echo "⏳ Waiting for ZAP DAST scan to complete..."
          while [[ $(${{ env.KUBECTL }} get job zap-dast-scan -o jsonpath='{.status.succeeded}') != "1" ]]; do
            if [[ $(${{ env.KUBECTL }} get job zap-dast-scan -o jsonpath='{.status.failed}') == "1" ]]; then
              echo "❌ ZAP DAST scan failed."
              ${{ env.KUBECTL }} logs job/zap-dast-scan
              exit 1
            fi
            sleep 5
          done

          echo "✅ ZAP DAST scan passed."

      - name: Fix SARIF for GitHub Code Scanning
        run: |
          sudo jq '
            .runs[].results[].locations[].physicalLocation.artifactLocation.uri |= 
            sub("^http://[^/]+/"; "todo-backend/")
          ' /home/admin/build/zap-output/zap-results.sarif.json | sudo tee /home/admin/build/zap-output/zap-fixed.sarif.json > /dev/null

      - name: Upload ZAP SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: /home/admin/build/zap-output/zap-fixed.sarif.json
          checkout_path: /home/admin/thesis-backend-runner/_work/todo-backend/todo-backend
