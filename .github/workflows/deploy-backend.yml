name: Deploy ToDo backend on K3s

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: SAST – Run Semgrep Scan via Docker
        run: |
          docker run --rm \
            -v "${PWD}:/src" \
            returntocorp/semgrep \
            semgrep ci --config=auto --exclude-dir node_modules --exclude-dir .git || {
              echo "❌ Semgrep scan failed. Deployment halted."
              exit 1
            }

      - name: Login to Vault
        shell: bash
        env:
          VAULT_TOKEN: ${{ secrets.VAULT_TOKEN }}
          VAULT_ADDR: http://192.168.1.160:21626
        run: |
          if [ -z "$VAULT_TOKEN" ]; then
            echo "❌ VAULT_TOKEN is missing"
            exit 1
          fi

          DB_USER=$(vault kv get -mount="todo-backend" -field=username postgres)
          DB_PASS=$(vault kv get -mount="todo-backend" -field=password postgres)
          DB_HOST=$(vault kv get -mount="todo-backend" -field=host postgres)
          DB_PORT=$(vault kv get -mount="todo-backend" -field=port postgres)
          DB_NAME=$(vault kv get -mount="todo-backend" -field=dbname postgres)

          JWT_SECRET=$(vault kv get -mount="todo-backend" -field=JWT_SECRET_KEY app)

          export DATABASE_URL="postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}"

          kubectl create secret generic backend-secrets \
            --from-literal=DATABASE_URL="$DATABASE_URL" \
            --from-literal=JWT_SECRET_KEY="$JWT_SECRET" \
            --dry-run=client -o yaml > k8s/backend-secrets.yaml

      - name: Apply backend secrets
        run: |
          sudo k3s kubectl apply -f k8s/backend-secrets.yaml

      - name: Prepare Kaniko build context
        run: |
          mkdir -p /home/admin/build/todo-backend
          rsync -av --exclude='.git' . /home/admin/build/todo-backend/

      - name: Debug check Kaniko build context
        run: ls -la /home/admin/build/todo-backend

      - name: Create Kaniko build job
        run: |
          sudo k3s kubectl apply -f k8s/kaniko-backend-job.yaml

      - name: Wait for Kaniko build to finish
        run: |
          while [[ $(sudo k3s kubectl get job kaniko-build-backend -o jsonpath='{.status.succeeded}') != "1" ]]; do
            echo "Waiting for kaniko-backend build to finish..."
            sleep 5
          done

      - name: Clean up Kaniko job
        run: |
          sudo k3s kubectl delete job kaniko-build-backend --ignore-not-found

      - name: Deploy backend
        run: |
          sudo k3s kubectl apply -f k8s/backend-deployment.yaml
          sudo k3s kubectl apply -f k8s/backend-service.yaml
          sudo k3s kubectl rollout restart deployment todo-backend
